openapi: 3.0.0
info:
  title: API сервис для проекта 6 городов.
  description: Русуры для проекта 6 городов.
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  contact:
    name: API Support
    email: ruslan91999@gmail.com
  version: 1.0.0

tags:
  - name: rental-offers
    description: Действия с объялвниями об аренде
  - name: users
    description: Действия с пользователями
  - name: comments
    description: Действия с комментраями пользователей
  - name: city-favorite-offers
    description: Действия с объявлниями для города или избранными объявлениями

paths:
  /users:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      description: Ресурс для создания нового пользователя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Уникальный email пользователя.
                password:
                  type: string
                  description: Пароль пользователя.
      responses:
        '201':
          description: Пользователь успешно создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Ошибка валидации или некорректные данные.
        '409':
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения
      description: Ресурс для аутентификации и авторизации пользователя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email пользователя.
                password:
                  type: string
                  description: Пароль пользователя.
      responses:
        '200':
          description: Успешная аутентификация, возвращается токен.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Токен для доступа к закрытой части приложения.
        '401':
          description: Неверный логин или пароль.

  /users/logout:
    delete:
      tags:
        - users
      summary: Выход из закрытой части приложения
      description: Ресурс для завершения пользовательского сеанса.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Сеанс успешно завершен.
        '401':
          description: Не авторизован или токен недействителен.

  /users/check:
    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Ресурс для проверки состояния клиента — авторизован или нет.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Клиент авторизован, возвращается информация о пользователе.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Клиент не авторизован или токен недействителен.

  /rental-offers:
    get:
      tags:
        - rental-offers
      summary: Список предложений
      description: Ресурс для получения списка предложений.
      parameters:
        - name: limit
          in: query
          description: Максимальное количество возвращаемых предложений.
          required: false
          schema:
            type: integer
            default: 60
      responses:
        '200':
          description: Успешно возвращены предложения.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalOffer'
    post:
      tags:
        - rental-offers
      summary: Создание нового предложения
      description: Ресурс для создания новых предложений.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalOffer'
      responses:
        '201':
          description: Предложение успешно создано.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalOffer'
        '400':
          description: Ошибка валидации или некорректные данные.
        '403':
          description: Не авторизован или токен недействителен.

  /rental-offers/{offerId}:
    put:
      tags:
        - rental-offers
      summary: Редактирование предложения
      description: Ресурс для редактирования предложения.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: offerId
          in: path
          required: true
          description: Идентификатор предложения.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalOffer'
      responses:
        '200':
          description: Предложение успешно обновлено.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalOffer'
        '400':
          description: Ошибка валидации или некорректные данные.
        '403':
          description: Не авторизован или токен недействителен.
        '404':
          description: Предложение не найдено.

    delete:
      tags:
        - rental-offers
      summary: Удаление предложения
      description: Ресурс для удаления предложения.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: offerId
          in: path
          required: true
          description: Идентификатор предложения.
          schema:
            type: string
      responses:
        '204':
          description: Предложение успешно удалено.
        '403':
          description: Не авторизован или токен недействителен.
        '404':
          description: Предложение не найдено.

    get:
      tags:
        - rental-offers
      summary: Детальная информация по предложению
      description: Ресурс для получения детальной информации по предложению.
      parameters:
        - name: offerId
          in: path
          required: true
          description: Идентификатор предложения.
          schema:
            type: string
      responses:
        '200':
          description: Успешно возвращена детальная информация по предложению.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalOffer'
        '404':
          description: Предложение не найдено.

  /comments/{offerId}/:
    get:
      tags:
        - comments
      summary: Получение списка комментариев для определенного предложения
      parameters:
        - name: offerId
          in: path
          required: true
          description: ID предложения
          schema:
            type: string
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - comments
      summary: Добавление комментария к определенному предложению
      security:
        - bearerAuth: [ ]
      parameters:
        - name: offerId
          in: path
          required: true
          description: ID предложения
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        201:
          description: Успешное создание
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /city-favorite-offers/{city}/:
    get:
      tags:
        - city-favorite-offers
      summary: Получение списка премиальных предложений для определённого города
      parameters:
        - in: path
          name: city
          schema:
            type: string
          required: true
          description: Название города
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalOffer'
                maxItems: 3

  /city-favorite-offers/:
    get:
      tags:
        - city-favorite-offers
      summary: Получение списка предложений, добавленных в избранное
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalOffer'
    post:
      tags:
        - city-favorite-offers
      summary: Добавление предложения в избранное
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offerId:
                  type: string
      responses:
        '201':
          description: Предложение успешно добавлено в избранное
    delete:
      tags:
        - city-favorite-offers
      summary: Удаление предложения из избранного
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offerId:
                  type: string
      responses:
        '200':
          description: Предложение успешно удалено из избранного

components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Код ошибки
        message:
          type: string
          description: Сообщение об ошибке
      required:
        - code
        - message

    User:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор пользователя.
        email:
          type: string
          description: Email пользователя.
      example:
        id: '123'
        email: 'user@example.com'

    Comment:
      type: object
      required:
        - text
        - publicationDate
        - rating
        - author
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
        publicationDate:
          type: string
          format: date-time
        rating:
          type: number
          minimum: 1
          maximum: 5
          format: float
        author:
          type: string
        NewComment:
          type: object
          required:
            - text
            - rating
          properties:
            text:
              type: string
              minLength: 5
              maxLength: 1024
            rating:
              type: number
              minimum: 1
              maximum: 5
              format: float

    NewComment:
      type: object
      properties:
        text:
          type: string
          description: Текст комментария
          minLength: 5
          maxLength: 1024
        rating:
          type: number
          description: Рейтинг от 1 до 5
          minimum: 1
          maximum: 5
          format: float
      required:
        - text
        - rating

    RentalOffer:
      type: object
      required:
        - title
        - description
        - publicationDate
        - city
        - previewImage
        - mainImages
        - isPremium
        - isFavourite
        - rating
        - housingType
        - roomsCounter
        - guestsCounter
        - rentalCost
        - amenities
        - userId
        - commentsNumber
        - coordinates
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        publicationDate:
          type: string
          format: date-time
        city:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
        previewImage:
          type: string
          format: uri
        images:
          type: array
          minItems: 6
          maxItems: 6
          items:
            type: string
            format: uri
        isPremium:
          type: boolean
        isFavourite:
          type: boolean
        rating:
          type: number
          minimum: 1
          maximum: 5
          format: float
        housingType:
          type: string
          enum:
            - apartment
            - house
            - room
            - hotel
        rooms:
          type: integer
          minimum: 1
          maximum: 8
        guests:
          type: integer
          minimum: 1
          maximum: 10
        rentalCost:
          type: integer
          minimum: 100
          maximum: 100000
        amenities:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
        offerAuthor:
          type: string
          format: uri
        commentsCount:
          type: integer
          readOnly: true
        location:
          type: object
          required:
            - latitude
            - longitude
          properties:
            latitude:
              type: number
              format: float
            longitude:
              type: number
              format: float

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
